///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package server;///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JOptionPane;

public class Map
{
	private String name = "Default Dungeon";
	private int goal = 2;
	private int height = 5;
	private int width = 5;
	
	// the default map
	private Tile[][] tiles = 
		{	{new Tile(Tile.WALL),new Tile(Tile.WALL),new Tile(Tile.ARMOUR),new Tile(Tile.WALL),new Tile(Tile.WALL)},
			{new Tile(Tile.WALL),new Tile(Tile.EXIT),new Tile(Tile.GOLD),new Tile(Tile.FLOOR),new Tile(Tile.GOLD)},
			{new Tile(Tile.LANTERN),new Tile(Tile.GOLD),new Tile(Tile.FLOOR),new Tile(Tile.HEALTH),new Tile(Tile.LANTERN)},
			{new Tile(Tile.WALL),new Tile(Tile.SWORD), new Tile(Tile.FLOOR),new Tile(Tile.ARMOUR),new Tile(Tile.GOLD)},
			{new Tile(Tile.WALL),new Tile(Tile.WALL),new Tile(Tile.SWORD),new Tile(Tile.WALL),new Tile(Tile.WALL)}
		};
	//Baked up a map in an unorthodox way just because BUCS computer might goof something up...

	public Map(String fileName) 
	{
		try
		{
			ArrayList<String> lines = loadFile(fileName);
			if (lines.size() >= 3) 
			{
				parseMap(lines);
			}
			
			else
			{
				JOptionPane.showMessageDialog(null, "Missing map file elements, using default map", "Using Default Map", JOptionPane.WARNING_MESSAGE);
			}
		} 
		
		catch (FileNotFoundException e) 
		{
			JOptionPane.showMessageDialog(null, "File not found, using default map", "Using Default Map", JOptionPane.WARNING_MESSAGE);
		} 
		
		catch (IOException e) 
		{
			JOptionPane.showMessageDialog(null, "Unable to load map, using default map", "Using Default Map", JOptionPane.WARNING_MESSAGE);
		}
	}

	public Map(){}
	public String getName()
	{
		return name;
	}

	public void setName(String name)
	{
		this.name = name;
	}

	public int getGoal() 
	{
		return goal;
	}

	public void setGoal(int goal)
	{
		this.goal = goal;
	}

	public int rtHeight()
	{
		return height;
	}

	public void setHeight(int height) 
	{
		this.height = height;
	}

	public int rtWidth() 
	{
		return width;
	}

	public void setWidth(int width)
	{
		this.width = width;
	}

	public Tile[][] getTiles()
	{
		return tiles;
	}


	private ArrayList<String> loadFile(String fileName) throws IOException
	{
		ArrayList<String> lines = new ArrayList<String>();
		BufferedReader reader = new BufferedReader(new FileReader(fileName));
		String line;
		while ((line = reader.readLine()) != null)
		{
			lines.add(line);
		}
		reader.close();
		return lines;
	}

	private void parseMap(ArrayList<String> lines)
	{
		String first = lines.get(0);
		String tempName = "";
		if (first.matches("name .*")) 
		{
			tempName = lines.get(0).split(" ", 2)[1];
		} 
		
		else
		
		{
			JOptionPane.showMessageDialog(null, "No map name found, using default map", "Using Default Map", JOptionPane.WARNING_MESSAGE);
			return;
		}
		
		String second = lines.get(1);
		int tempGoal;
		String goalString;
		if (second.matches("win [0-9]+")) 
		{
			goalString = second.split(" ", 2)[1];
			tempGoal = Integer.parseInt(goalString);
		} 
		
		else 
		{
			JOptionPane.showMessageDialog(null, "No goal found, using default map", "Using Default Map", JOptionPane.WARNING_MESSAGE);
			return;
		}

		int tempHeight = lines.size() - 2;
		int tempWidth = lines.get(3).length();
		Tile[][] tempMap = new Tile[tempHeight][tempWidth];
		int goldCount = 0;
		for (int row = 0; row < tempHeight; row++) 
		{
			String rowString = lines.get(row + 2);
			if (!rowString.matches("[ASLGHE.#]*")) 
			{
				JOptionPane.showMessageDialog(null, "Invalid map characters, using default map", "Using Default Map", JOptionPane.WARNING_MESSAGE);
				return;
			}
			
			for (int col = 0; col < tempWidth; col++)
			{
				char currentChar = rowString.charAt(col);
				tempMap[row][col] = new Tile(currentChar);
				
				if (currentChar == 'G') 
				{
					goldCount++;
				}
			}
		}

		if (goldCount >= tempGoal) 
		{
			name = tempName;
			goal = tempGoal;
			width = tempWidth;
			height = tempHeight;
			tiles = tempMap;
		} 
		
		else 
		{
			JOptionPane.showMessageDialog(null, "Not enough gold on the map, using default map", "Using Default Map", JOptionPane.WARNING_MESSAGE);
			return;
		}
	}
	

	public String toString() 
	{
		String mapString = "";
		
		for (int row = 0; row < height; row++) 
		{
			for (int col = 0; col < width; col++) 
			{
				if (tiles[row][col].isOccupied()) 
				{
					mapString += "P";
				} 
				
				else 
				{
					mapString += tiles[row][col].getBase();
				}
			}
			
			if (row != height - 1) 
			{
				mapString += "\n";
			}
		}
		
		return mapString;
	}
}

class Tile 
{
	//publics and privates//
	public static final char FLOOR   = '.';
	public static final char WALL    = '#';
	public static final char EXIT    = 'E';
	public static final char GOLD    = 'G';
	public static final char SWORD   = 'S';
	public static final char ARMOUR  = 'A';
	public static final char LANTERN = 'L';
	public static final char HEALTH  = 'H';
	private char dirt;
	private int gold;
	private Player player;
	
	public Tile(char base)
	{
		this.dirt = base;
		
		if (base == 'G') 
		{
			gold = 1;//this tile holds one g
		} 
		
		else
		{
			gold = 0;//all other tiles hold none. Monopolies.
		}
		player = null;
	}

	public char getBase() 
	{
		return dirt;//returns the empty space
	}


	public void setDirt(char dirt)
	{
		this.dirt = dirt;//dirty dirt
	}
	

	public int getGold() 
	{
		return gold;//gold is golden
	}
	

	public void setGold(int gold) 
	{
		if (gold > 0)
		{
			dirt = 'G';//once we empty the gold from the tile, the tile goes dirt
		}
		this.gold = gold;
	}

	public void addGold(int amount) 
	{
		gold += amount;
		if (gold > 0) 
		{
			dirt = 'G';
		}
	}
	

	public int popGold()
	{
		int amount = gold;
		gold = 0;
		dirt = FLOOR;
		return amount;
	}
	
	public void occupy(Player player)
	{
		this.player = player;//checks if the player occupies
	}
	

	public void unOccupy() 
	{
		player = null;//no player means vacant. cows go moo 
	}
	

	public Player getPlayer() 
	{
		return player;
	}
	

	public boolean isOccupied()
	{
		if (player == null) 
		{
			return false;
		}
		return true;
	}
	
	public boolean plRoam() 
	{
		if (dirt == '#' || isOccupied()) //wall cant be dirt
		{
			return false;
		}
		return true;
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////